@page "/Register"
@using WithinBudget.Components
@inject HttpClient Http
@inject NavigationManager Navigation

<MudPaper Class="pa-4 mx-auto mt-12 border" Style="max-width:400px;">
    <MudForm Model="@_model" @onsubmit="AttemptRegister">
        
        <MudText Typo="Typo.h5">Register</MudText>
        
        <MudTextField
            @bind-Value="_model.FirstName" 
            Label="First Name"
            Required="true" 
            FullWidth="true"
            For="@(() => _model.FirstName)"
            Error="@_errorMessages.ContainsKey(nameof(_model.FirstName))"
            ErrorText="@(_errorMessages.TryGetValue(nameof(_model.FirstName), out var firstNameErr) ? firstNameErr[0] : "")"/>
        
        <MudTextField 
            @bind-Value="_model.LastName"
            Label="Last Name"
            Required="true" 
            FullWidth="true" 
            For="@(() => _model.LastName)"
            Error="@_errorMessages.ContainsKey(nameof(_model.LastName))"
            ErrorText="@(_errorMessages.TryGetValue(nameof(_model.LastName), out var lastNameErr) ? lastNameErr[0] : "")"/>
        
        <MudTextField 
            @bind-Value="_model.Email"
            Label="Email" 
            Required="true" 
            FullWidth="true" 
            For="@(() => _model.Email)"
            Error="@_errorMessages.ContainsKey(nameof(_model.Email))"
            ErrorText="@(_errorMessages.TryGetValue(nameof(_model.Email), out var emailErr) ? emailErr[0] : "")"/>
        
        <MudTextField
            @bind-Value="_model.Password"
            Label="Password"
            InputType="@(_showPassword ? InputType.Text : InputType.Password)"
            Required="true"
            FullWidth="true"
            For="@(() => _model.Password)"
            Adornment="Adornment.End"
            AdornmentIcon="@(_showPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
            OnAdornmentClick="TogglePasswordVisibility"
            Error="@_errorMessages.ContainsKey(nameof(_model.Password))"
            ErrorText="@(_errorMessages.TryGetValue(nameof(_model.Password), out var errors) ? errors[0] : "")"/>

        <MudButton ButtonType="ButtonType.Submit"
                   Color="Color.Primary" 
                   Variant="Variant.Filled" 
                   Class="mt-4" 
                   FullWidth="true">
            Register
        </MudButton>

        <MudText Class="mt-2">
            Already have an account? <MudLink Href="/">Login here</MudLink>
        </MudText>
    </MudForm>
</MudPaper>

@if (_errorMessages.Any(x => x.Key == string.Empty))
{
    <ApiErrorCard Errors="_errorMessages" />
}
